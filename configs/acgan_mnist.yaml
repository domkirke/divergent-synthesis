name: ???
rundir: "${dir:runtime}/saves/${name}"

hydra:
  job:
    name: "${name}"
  run:
    dir: "${rundir}/${name}"
  sweep:
    dir: "${dir:runtime}/saves/${name}"
    subdir: "${base:${data.dataset.root}}"

defaults:
  - data:
    - defaults
    - dataset/mnist
  - callbacks: img_defaults
  - _self_

data:
  dataset:
    binary: 1
    polarity: bipolar
  loader: 
    batch_size: 64

model:
  type: ACGAN
  latent:
    dim: 118
  classes:
    class:
      mode: cat
      dim: 10
  generator:
    type: ConvGenerator
    args:
      module: DeconvEncoder 
      dim: 2
      channels: [32, 32, 32]
      norm: instance
      kernel_size: [9, 9, 9]
      stride: [2, 2, 2]
      out_nnlin: Tanh
  discriminator:
    type: ConvAuxDiscriminator
    args:
      module: ConvEncoder
      dim: 2
      norm: instance
      channels: [32,32,32]
      kernel_size: [9,9,9]
      stride: [2, 2, 2]
  training:
    mode: wasserstein
    balance: [1, 1]
    margin: 0.1
    invert: 0
    lr: [1.e-4, 1.e-4]
    # feature_matching: 10.0
    gp: 10.0

pl_trainer:
  max_epochs: 10000
  # limit_train_batches: 1
  # limit_val_batches: 1

callbacks:
- { type: LearningRateMonitor, args: {logging_interval: "epoch"} }
- { type: ModelSummary, args: {max_depth: 1} }
- { type: ModelCheckpoint, args: {dirpath: "${hydra:run.dir}", filename: "${hydra:job.name}", every_n_epochs: 1, save_last: True}}
- { type: DissectionMonitor, args: {monitor_epochs: 10, embedding_epochs: 10, n_batches: 3, batch_size: 512} }
- { type: ImgReconstructionMonitor }
